"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `PostComment`."""
  allPostComments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCommentCondition
  ): PostCommentsConnection

  """Reads and enables pagination through a set of `Post`."""
  allPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection

  """Reads and enables pagination through a set of `UserPostStat`."""
  allUserPostStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserPostStat`."""
    orderBy: [UserPostStatsOrderBy!] = [NATURAL]
  ): UserPostStatsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  postCommentByRowId(rowId: UUID!): PostComment
  postByRowId(rowId: UUID!): Post
  userByRowId(rowId: UUID!): User
  userByEmail(email: String!): User

  """Reads a single `PostComment` using its globally unique `ID`."""
  postComment(
    """
    The globally unique `ID` to be used in selecting a single `PostComment`.
    """
    id: ID!
  ): PostComment

  """Reads a single `Post` using its globally unique `ID`."""
  post(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    id: ID!
  ): Post

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `PostComment` values."""
type PostCommentsConnection {
  """A list of `PostComment` objects."""
  nodes: [PostComment!]!

  """
  A list of edges which contains the `PostComment` and cursor to aid in pagination.
  """
  edges: [PostCommentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PostComment` you could get from the connection."""
  totalCount: Int!
}

"""Comments on blog posts"""
type PostComment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique identifier for the comment"""
  rowId: UUID!

  """Foreign key reference to the post being commented on"""
  postId: UUID!

  """Foreign key reference to the user who created the comment"""
  authorId: UUID!

  """Text content of the comment"""
  content: String!

  """Timestamp when comment was created"""
  createdAt: Datetime!

  """Timestamp when comment was last updated"""
  updatedAt: Datetime!

  """Reads a single `Post` that is related to this `PostComment`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostComment`."""
  userByAuthorId: User
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""Blog posts created by users"""
type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique identifier for the post"""
  rowId: UUID!

  """Foreign key reference to the user who created the post"""
  authorId: UUID!

  """Post category: tutorial, opinion, or review"""
  category: String!

  """Title of the post"""
  title: String!

  """Timestamp when post was created"""
  createdAt: Datetime!

  """Timestamp when post was last updated"""
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """Reads and enables pagination through a set of `PostComment`."""
  postCommentsByPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCommentCondition
  ): PostCommentsConnection!
}

"""User accounts with personal information"""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique identifier for the user"""
  rowId: UUID!

  """User email address, must be unique"""
  email: String!

  """User first name"""
  firstName: String!

  """User last name"""
  lastName: String!

  """Timestamp when user was created"""
  createdAt: Datetime!

  """Timestamp when user was last updated"""
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Post`."""
  postsByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection!

  """Reads and enables pagination through a set of `PostComment`."""
  postCommentsByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCommentCondition
  ): PostCommentsConnection!
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post!]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""Methods to use when ordering `PostComment`."""
enum PostCommentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POST_ID_ASC
  POST_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PostComment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PostCommentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `postId` field."""
  postId: UUID

  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A `PostComment` edge in the connection."""
type PostCommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PostComment` at the end of the edge."""
  node: PostComment!
}

"""A connection to a list of `UserPostStat` values."""
type UserPostStatsConnection {
  """A list of `UserPostStat` objects."""
  nodes: [UserPostStat!]!

  """
  A list of edges which contains the `UserPostStat` and cursor to aid in pagination.
  """
  edges: [UserPostStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserPostStat` you could get from the connection."""
  totalCount: Int!
}

"""User statistics showing total posts and average comments per post"""
type UserPostStat {
  userId: UUID
  email: String
  firstName: String
  lastName: String
  totalPosts: BigInt
  avgCommentsPerPost: BigFloat
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A `UserPostStat` edge in the connection."""
type UserPostStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserPostStat` at the end of the edge."""
  node: UserPostStat!
}

"""Methods to use when ordering `UserPostStat`."""
enum UserPostStatsOrderBy {
  NATURAL
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `email` field."""
  email: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `PostComment`."""
  createPostComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostCommentInput!
  ): CreatePostCommentPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `PostComment` using its globally unique id and a patch.
  """
  updatePostComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostCommentInput!
  ): UpdatePostCommentPayload

  """Updates a single `PostComment` using a unique key and a patch."""
  updatePostCommentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostCommentByRowIdInput!
  ): UpdatePostCommentPayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePostByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByRowIdInput!
  ): UpdatePostPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByRowIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Deletes a single `PostComment` using its globally unique id."""
  deletePostComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostCommentInput!
  ): DeletePostCommentPayload

  """Deletes a single `PostComment` using a unique key."""
  deletePostCommentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostCommentByRowIdInput!
  ): DeletePostCommentPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePostByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByRowIdInput!
  ): DeletePostPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByRowIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload
}

"""The output of our create `PostComment` mutation."""
type CreatePostCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostComment` that was created by this mutation."""
  postComment: PostComment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Post` that is related to this `PostComment`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostComment`."""
  userByAuthorId: User

  """An edge for our `PostComment`. May be used by Relay 1."""
  postCommentEdge(
    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostCommentsEdge
}

"""All input for the create `PostComment` mutation."""
input CreatePostCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PostComment` to be created by this mutation."""
  postComment: PostCommentInput!
}

"""An input for mutations affecting `PostComment`"""
input PostCommentInput {
  """Unique identifier for the comment"""
  rowId: UUID

  """Foreign key reference to the post being commented on"""
  postId: UUID!

  """Foreign key reference to the user who created the comment"""
  authorId: UUID!

  """Text content of the comment"""
  content: String!

  """Timestamp when comment was created"""
  createdAt: Datetime

  """Timestamp when comment was last updated"""
  updatedAt: Datetime
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""An input for mutations affecting `Post`"""
input PostInput {
  """Unique identifier for the post"""
  rowId: UUID

  """Foreign key reference to the user who created the post"""
  authorId: UUID!

  """Post category: tutorial, opinion, or review"""
  category: String!

  """Title of the post"""
  title: String!

  """Timestamp when post was created"""
  createdAt: Datetime

  """Timestamp when post was last updated"""
  updatedAt: Datetime
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Unique identifier for the user"""
  rowId: UUID

  """User email address, must be unique"""
  email: String!

  """User first name"""
  firstName: String!

  """User last name"""
  lastName: String!

  """Timestamp when user was created"""
  createdAt: Datetime

  """Timestamp when user was last updated"""
  updatedAt: Datetime
}

"""The output of our update `PostComment` mutation."""
type UpdatePostCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostComment` that was updated by this mutation."""
  postComment: PostComment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Post` that is related to this `PostComment`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostComment`."""
  userByAuthorId: User

  """An edge for our `PostComment`. May be used by Relay 1."""
  postCommentEdge(
    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostCommentsEdge
}

"""All input for the `updatePostComment` mutation."""
input UpdatePostCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostComment` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `PostComment` being updated.
  """
  postCommentPatch: PostCommentPatch!
}

"""
Represents an update to a `PostComment`. Fields that are set will be updated.
"""
input PostCommentPatch {
  """Unique identifier for the comment"""
  rowId: UUID

  """Foreign key reference to the post being commented on"""
  postId: UUID

  """Foreign key reference to the user who created the comment"""
  authorId: UUID

  """Text content of the comment"""
  content: String

  """Timestamp when comment was created"""
  createdAt: Datetime

  """Timestamp when comment was last updated"""
  updatedAt: Datetime
}

"""All input for the `updatePostCommentByRowId` mutation."""
input UpdatePostCommentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PostComment` being updated.
  """
  postCommentPatch: PostCommentPatch!

  """Unique identifier for the comment"""
  rowId: UUID!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  """Unique identifier for the post"""
  rowId: UUID

  """Foreign key reference to the user who created the post"""
  authorId: UUID

  """Post category: tutorial, opinion, or review"""
  category: String

  """Title of the post"""
  title: String

  """Timestamp when post was created"""
  createdAt: Datetime

  """Timestamp when post was last updated"""
  updatedAt: Datetime
}

"""All input for the `updatePostByRowId` mutation."""
input UpdatePostByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!

  """Unique identifier for the post"""
  rowId: UUID!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Unique identifier for the user"""
  rowId: UUID

  """User email address, must be unique"""
  email: String

  """User first name"""
  firstName: String

  """User last name"""
  lastName: String

  """Timestamp when user was created"""
  createdAt: Datetime

  """Timestamp when user was last updated"""
  updatedAt: Datetime
}

"""All input for the `updateUserByRowId` mutation."""
input UpdateUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """Unique identifier for the user"""
  rowId: UUID!
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """User email address, must be unique"""
  email: String!
}

"""The output of our delete `PostComment` mutation."""
type DeletePostCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostComment` that was deleted by this mutation."""
  postComment: PostComment
  deletedPostCommentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Post` that is related to this `PostComment`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostComment`."""
  userByAuthorId: User

  """An edge for our `PostComment`. May be used by Relay 1."""
  postCommentEdge(
    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostCommentsEdge
}

"""All input for the `deletePostComment` mutation."""
input DeletePostCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostComment` to be deleted.
  """
  id: ID!
}

"""All input for the `deletePostCommentByRowId` mutation."""
input DeletePostCommentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the comment"""
  rowId: UUID!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  id: ID!
}

"""All input for the `deletePostByRowId` mutation."""
input DeletePostByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the post"""
  rowId: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteUserByRowId` mutation."""
input DeleteUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user"""
  rowId: UUID!
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """User email address, must be unique"""
  email: String!
}
